package com.fish1208.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class QuestionAnswer extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","20830184612c3b565b9392505050565b6000606082019050612ce06000830186612892565b612ced6020830185612c3b565b612cfa6040830184612c3b565b949350505050565b60006020820190508181036000830152612d1b816128a1565b9050919050565b60006020820190508181036000830152612d3b816128d8565b9050919050565b60006020820190508181036000830152612d5b8161290f565b9050919050565b60006020820190508181036000830152612d7b8161296c565b9050919050565b60006020820190508181036000830152612d9b816129a3565b9050919050565b60006020820190508181036000830152612dbb81612a00565b9050919050565b60006020820190508181036000830152612ddb81612a37565b9050919050565b60006020820190508181036000830152612dfb81612a6e565b9050919050565b60006020820190508181036000830152612e1b81612aa5565b9050919050565b60006020820190508181036000830152612e3b81612b02565b9050919050565b60006020820190508181036000830152612e5b81612b5f565b9050919050565b60006020820190508181036000830152612e7b81612b96565b9050919050565b60006020820190508181036000830152612e9b81612bcd565b9050919050565b60006020820190508181036000830152612ebb81612c04565b9050919050565b6000602082019050612ed76000830184612c3b565b92915050565b600061010082019050612ef3600083018b612c3b565b612f00602083018a612892565b612f0d6040830189612892565b612f1a6060830188612819565b612f276080830187612819565b612f3460a0830186612c3b565b612f4160c0830185612c3b565b612f4e60e0830184612c3b565b9998505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715612f7e57600080fd5b8060405250919050565b600067ffffffffffffffff821115612f9f57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b828183376000838301525050505600a265627a7a72305820abb74c5299954e0de894d16554ca41f138d0720982b37126a49984ca4b12f29c6c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405267016345785d8a0000600055600060025560006004553480156200002757600080fd5b50604051602080620033da83398101806040526200004991908101906200028f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620000be576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620000b590620002f2565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600d6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060006101000a81548160ff02191690831515021790555060018060016101000a81548160ff0219169083151502179055505062000334565b600062000287825162000314565b905092915050565b600060208284031215620002a257600080fd5b6000620002b28482850162000279565b91505092915050565b6000601682527f4f776e6572206d7573742062652070726f7669646564000000000000000000006020830152604082019050919050565b600060208201905081810360008301526200030d81620002bb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61309680620003446000396000f3006080604052600436106101a1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ef6382f146101a657806328bfaecd146101bd578063296ef502146101e85780632b1b12ad146101ff57806332e3a17e1461022a5780633b6c3a431461025557806345f9fd1f1461026c5780635089e2c81461029557806353481f0f146102c057806356bfb4c9146102eb57806359b4c800146103165780635a6c9721146103415780635bb9b9241461036a5780635df84541146103a75780635f32d13c146103d25780635fceda9c146103fd578063702251811461041457806371a707571461042b57806374b5fe691461046f5780637edbba7d1461048b57806382721794146104a75780638b940989146104d25780639823b3b41461050f578063a1eabc4f14610538578063a33bea3c14610575578063ab775325146105a0578063af9e7f25146105cb578063b177f929146105f6578063b445d08e14610621578063cfd24cba1461064a578063e4930bb914610673578063e51f25901461069e578063e7e1742d146106c9575b600080fd5b3480156101b257600080fd5b506101bb6106f4565b005b3480156101c957600080fd5b506101d2610921565b6040516101df9190612c4a565b60405180910390f35b3480156101f457600080fd5b506101fd610947565b005b34801561020b57600080fd5b50610214610a08565b6040516102219190612ec2565b60405180910390f35b34801561023657600080fd5b5061023f610a0e565b60405161024c9190612ec2565b60405180910390f35b34801561026157600080fd5b5061026a610a14565b005b34801561027857600080fd5b50610293600480360361028e9190810190612789565b610c99565b005b3480156102a157600080fd5b506102aa610f8f565b6040516102b79190612c4a565b60405180910390f35b3480156102cc57600080fd5b506102d5610fb5565b6040516102e29190612c65565b60405180910390f35b3480156102f757600080fd5b5061030061100d565b60405161030d9190612c87565b60405180910390f35b34801561032257600080fd5b5061032b61101f565b6040516103389190612c4a565b60405180910390f35b34801561034d57600080fd5b5061036860048036036103639190810190612724565b611045565b005b34801561037657600080fd5b50610391600480360361038c9190810190612724565b6111ae565b60405161039e9190612ec2565b60405180910390f35b3480156103b357600080fd5b506103bc6111fa565b6040516103c99190612ec2565b60405180910390f35b3480156103de57600080fd5b506103e76111ff565b6040516103f49190612ec2565b60405180910390f35b34801561040957600080fd5b50610412611205565b005b34801561042057600080fd5b506104296112ee565b005b34801561043757600080fd5b50610452600480360361044d9190810190612789565b6113d9565b604051610466989796959493929190612edd565b60405180910390f35b61048960048036036104849190810190612789565b611461565b005b6104a560048036036104a0919081019061274d565b61152b565b005b3480156104b357600080fd5b506104bc611951565b6040516104c99190612ec2565b60405180910390f35b3480156104de57600080fd5b506104f960048036036104f49190810190612724565b611956565b6040516105069190612c65565b60405180910390f35b34801561051b57600080fd5b5061053660048036036105319190810190612789565b6119ed565b005b34801561054457600080fd5b5061055f600480360361055a9190810190612724565b611a89565b60405161056c9190612c87565b60405180910390f35b34801561058157600080fd5b5061058a611aa9565b6040516105979190612c4a565b60405180910390f35b3480156105ac57600080fd5b506105b5611acf565b6040516105c29190612c87565b60405180910390f35b3480156105d757600080fd5b506105e0611ae2565b6040516105ed9190612c65565b60405180910390f35b34801561060257600080fd5b5061060b611b3a565b6040516106189190612ec2565b60405180910390f35b34801561062d57600080fd5b50610648600480360361064391908101906127b2565b611b47565b005b34801561065657600080fd5b50610671600480360361066c9190810190612724565b6120af565b005b34801561067f57600080fd5b50610688612185565b6040516106959190612ec2565b60405180910390f35b3480156106aa57600080fd5b506106b361218a565b6040516106c09190612ec2565b60405180910390f35b3480156106d557600080fd5b506106de612197565b6040516106eb9190612ec2565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610786576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161077d90612d02565b60405180910390fd5b6000600d6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600d6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060045411151561098f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161098690612e22565b60405180910390fd5b60045490506000600481905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a04573d6000803e3d6000fd5b5050565b60025481565b60045481565b3373ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610aa6576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610a9d90612d62565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610b9a576000600d6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b33600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600d6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b600080600080600060011515600d60003373ffffffffffffffffffffffffffffffff","ffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610d36576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610d2d90612e02565b60405180910390fd5b6000600660008881526020019081526020016000206000015414151515610d92576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610d8990612d22565b60405180910390fd5b600094506006600087815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693506006600087815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600060066000888152602001908152602001600020600601541415610e5857610e31848761219d565b610e3a86612423565b60066000878152602001908152602001600020600701549450610e6c565b610e62838761219d565b610e6b8661250c565b5b60066000878152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005820160009055600682016000905560078201600090555050600085141515610f87576064610f1786605a6125f5565b811515610f2057fe5b049150610f2d8583612628565b9050806004600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610f85573d6000803e3d6000fd5b505b505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600780548060200260200160405190810160405280929190818152602001828054801561100357602002820191906000526020600020905b815481526020019060010190808311610fef575b5050505050905090565b6001809054906101000a900460ff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110d7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016110ce90612d42565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561116a576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161116190612e82565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b605a81565b60005481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611297576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161128e90612d42565b60405180910390fd5b600115156001809054906101000a900460ff16151514156112d15760006001806101000a81548160ff0219169083151502179055506112ec565b60018060016101000a81548160ff0219169083151502179055505b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611380576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161137790612d42565b60405180910390fd5b60011515600160009054906101000a900460ff16151514156113bc576000600160006101000a81548160ff0219169083151502179055506113d7565b60018060006101000a81548160ff0219169083151502179055505b565b60066020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154908060070154905088565b60006006600083815260200190815260200160002060000154141515156114bd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016114b490612d22565b60405180910390fd5b6000543410151515611504576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016114fb90612da2565b60405180910390fd5b34600660008381526020019081526020016000206007016000828254019250508190555050565b600060011515600160009054906101000a900460ff161515141515611585576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161157c90612d82565b60405180910390fd5b6000602060ff161115156115ce576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016115c590612ea2565b60405180910390fd5b60006001026000191682600019161415801561166e57506040516020018060000190506040516020818303038152906040526040518082805190602001908083835b6020831015156116355780518252602082019150602081019050602083039250611610565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826000191614155b15156116af576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016116a690612e62565b60405180910390fd5b60005434101515156116f6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016116ed90612da2565b60405180910390fd5b60026000815460010191905081905590506101006040519081016040528082815260200184600019168152602001836000191681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200142815260200160008152602001348152506006600083815260200190815260200160002060008201518160000155602082015181600101906000191690556040820151816002019060001916905560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c0820151816006015560e082015181600701559050506007819080600181540180825580915050906001820390600052602060002001600090919290919091505550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055503373ffffffffffffffffffffffffffffffffffffffff16817f1687a8c22d80556f05b6be685523b7b660d1c7fe6b5b546752921755a5f9375085423460405161194493929190612ccb565b60405180910390a3505050565b606481565b6060600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156119e157602002820191906000526020600020905b8154815260200190600101908083116119cd575b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a7f576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611a7690612d42565b60405180910390fd5b8060008190555050565b600d6020528060005260406000206000915054906101000a900460ff1681565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900460ff1681565b60606008805480602002602001604051908101604052809291908181526020018280548015611b3057602002820191906000526020600020905b815481526020019060010190808311611b1c575b5050505050905090565b6000600880549050905090565b6000806000600115156001809054906101000a900460ff161515141515611ba3576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611b9a90612dc2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166006600088815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611c4a576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611c4190612de2565b60405180910390fd5b846040516020018082805190602001908083835b602083101515611c835780518252602082019150602081019050602083039250611c5e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260405180","","20830184612c3b565b9392505050565b6000606082019050612ce06000830186612892565b612ced6020830185612c3b565b612cfa6040830184612c3b565b949350505050565b60006020820190508181036000830152612d1b816128a1565b9050919050565b60006020820190508181036000830152612d3b816128d8565b9050919050565b60006020820190508181036000830152612d5b8161290f565b9050919050565b60006020820190508181036000830152612d7b81612946565b9050919050565b60006020820190508181036000830152612d9b816129a3565b9050919050565b60006020820190508181036000830152612dbb81612a00565b9050919050565b60006020820190508181036000830152612ddb81612a37565b9050919050565b60006020820190508181036000830152612dfb81612a94565b9050919050565b60006020820190508181036000830152612e1b81612acb565b9050919050565b60006020820190508181036000830152612e3b81612b02565b9050919050565b60006020820190508181036000830152612e5b81612b39565b9050919050565b60006020820190508181036000830152612e7b81612b70565b9050919050565b60006020820190508181036000830152612e9b81612ba7565b9050919050565b60006020820190508181036000830152612ebb81612c04565b9050919050565b6000602082019050612ed76000830184612c3b565b92915050565b600061010082019050612ef3600083018b612c3b565b612f00602083018a612892565b612f0d6040830189612892565b612f1a6060830188612819565b612f276080830187612819565b612f3460a0830186612c3b565b612f4160c0830185612c3b565b612f4e60e0830184612c3b565b9998505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715612f7e57600080fd5b8060405250919050565b600067ffffffffffffffff821115612f9f57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b828183376000838301525050505600a265627a7a723058207e5bc71ed04f526da2a9dfad1cfdf23de0ee76d71c506713da56aca78e5094b56c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"unsolvedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"additionalBounty\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"participantCountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"modifyAnswerState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newAdministrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeQuestion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionOf\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"question\",\"type\":\"bytes32\"},{\"name\":\"answer\",\"type\":\"bytes32\"},{\"name\":\"questioner\",\"type\":\"address\"},{\"name\":\"answerer\",\"type\":\"address\"},{\"name\":\"questionTime\",\"type\":\"uint256\"},{\"name\":\"answerTime\",\"type\":\"uint256\"},{\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"applyChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_answer\",\"type\":\"string\"},{\"name\":\"_rescue\",\"type\":\"address\"}],\"name\":\"answer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setLowestBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsolvedList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowestBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"participantOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ANSWERER_DIVIDED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolvedList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SHARER_DIVIDED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"questionOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"answerOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_question\",\"type\":\"bytes32\"},{\"name\":\"_answer\",\"type\":\"bytes32\"}],\"name\":\"question\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolvedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"modifyQuestionState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"questioner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"question\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"questionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"NewQuestion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"answerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"answer\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"answerTime\",\"type\":\"uint256\"}],\"name\":\"QuestionSolved\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_UNSOLVEDCOUNT = "unsolvedCount";

    public static final String FUNC_ADDITIONALBOUNTY = "additionalBounty";

    public static final String FUNC_PARTICIPANTCOUNTOF = "participantCountOf";

    public static final String FUNC_MODIFYANSWERSTATE = "modifyAnswerState";

    public static final String FUNC_WHITELIST = "whiteList";

    public static final String FUNC_NEWADMINISTRATOR = "newAdministrator";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_REMOVEQUESTION = "removeQuestion";

    public static final String FUNC_QUESTIONOF = "questionOf";

    public static final String FUNC_APPLYCHANGEOWNER = "applyChangeOwner";

    public static final String FUNC_ANSWER = "answer";

    public static final String FUNC_CHANGEOWNER = "changeOwner";

    public static final String FUNC_PROFIT = "profit";

    public static final String FUNC_SETLOWESTBOUNTY = "setLowestBounty";

    public static final String FUNC_UNSOLVEDLIST = "unsolvedList";

    public static final String FUNC_MINIMUMREWARD = "minimumReward";

    public static final String FUNC_LOWESTBOUNTY = "lowestBounty";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_DENOMINATOR = "DENOMINATOR";

    public static final String FUNC_PARTICIPANTOF = "participantOf";

    public static final String FUNC_ANSWERER_DIVIDED = "ANSWERER_DIVIDED";

    public static final String FUNC_RESOLVEDLIST = "resolvedList";

    public static final String FUNC_SHARER_DIVIDED = "SHARER_DIVIDED";

    public static final String FUNC_QUESTIONOPEN = "questionOpen";

    public static final String FUNC_ANSWEROPEN = "answerOpen";

    public static final String FUNC_INCREMENT = "increment";

    public static final String FUNC_NEWOWNER = "newOwner";

    public static final String FUNC_CONFIRMADMINISTRATOR = "confirmAdministrator";

    public static final String FUNC_SETADMINISTRATOR = "setAdministrator";

    public static final String FUNC_QUESTION = "question";

    public static final String FUNC_ADMINISTRATOR = "administrator";

    public static final String FUNC_RESOLVEDCOUNT = "resolvedCount";

    public static final String FUNC_MODIFYQUESTIONSTATE = "modifyQuestionState";

    public static final Event NEWQUESTION_EVENT = new Event("NewQuestion", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event QUESTIONSOLVED_EVENT = new Event("QuestionSolved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected QuestionAnswer(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger unsolvedCount() throws ContractException {
        final Function function = new Function(FUNC_UNSOLVEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt additionalBounty(BigInteger _id) {
        final Function function = new Function(
                FUNC_ADDITIONALBOUNTY, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void additionalBounty(BigInteger _id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITIONALBOUNTY, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAdditionalBounty(BigInteger _id) {
        final Function function = new Function(
                FUNC_ADDITIONALBOUNTY, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getAdditionalBountyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITIONALBOUNTY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger participantCountOf(String _address) throws ContractException {
        final Function function = new Function(FUNC_PARTICIPANTCOUNTOF, 
                Arrays.<Type>asList(new Address(_address)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt modifyAnswerState() {
        final Function function = new Function(
                FUNC_MODIFYANSWERSTATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void modifyAnswerState(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYANSWERSTATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyAnswerState() {
        final Function function = new Function(
                FUNC_MODIFYANSWERSTATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Boolean whiteList(String param0) throws ContractException {
        final Function function = new Function(FUNC_WHITELIST, 
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String newAdministrator() throws ContractException {
        final Function function = new Function(FUNC_NEWADMINISTRATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt withdraw() {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void withdraw(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForWithdraw() {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt removeQuestion(BigInteger _id) {
        final Function function = new Function(
                FUNC_REMOVEQUESTION, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeQuestion(BigInteger _id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEQUESTION, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveQuestion(BigInteger _id) {
        final Function function = new Function(
                FUNC_REMOVEQUESTION, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getRemoveQuestionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEQUESTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple8<BigInteger, byte[], byte[], String, String, BigInteger, BigInteger, BigInteger> questionOf(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_QUESTIONOF, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, byte[], byte[], String, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue());
    }

    public TransactionReceipt applyChangeOwner(String _address) {
        final Function function = new Function(
                FUNC_APPLYCHANGEOWNER, 
                Arrays.<Type>asList(new Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void applyChangeOwner(String _address, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPLYCHANGEOWNER, 
                Arrays.<Type>asList(new Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApplyChangeOwner(String _address) {
        final Function function = new Function(
                FUNC_APPLYCHANGEOWNER, 
                Arrays.<Type>asList(new Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getApplyChangeOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPLYCHANGEOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt answer(BigInteger _id, String _answer, String _rescue) {
        final Function function = new Function(
                FUNC_ANSWER, 
                Arrays.<Type>asList(new Uint256(_id),
                new Utf8String(_answer),
                new Address(_rescue)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void answer(BigInteger _id, String _answer, String _rescue, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ANSWER, 
                Arrays.<Type>asList(new Uint256(_id),
                new Utf8String(_answer),
                new Address(_rescue)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAnswer(BigInteger _id, String _answer, String _rescue) {
        final Function function = new Function(
                FUNC_ANSWER, 
                Arrays.<Type>asList(new Uint256(_id),
                new Utf8String(_answer),
                new Address(_rescue)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getAnswerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ANSWER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt changeOwner() {
        final Function function = new Function(
                FUNC_CHANGEOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void changeOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeOwner() {
        final Function function = new Function(
                FUNC_CHANGEOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger profit() throws ContractException {
        final Function function = new Function(FUNC_PROFIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setLowestBounty(BigInteger _amount) {
        final Function function = new Function(
                FUNC_SETLOWESTBOUNTY, 
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setLowestBounty(BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETLOWESTBOUNTY, 
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetLowestBounty(BigInteger _amount) {
        final Function function = new Function(
                FUNC_SETLOWESTBOUNTY, 
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetLowestBountyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETLOWESTBOUNTY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List unsolvedList() throws ContractException {
        final Function function = new Function(FUNC_UNSOLVEDLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger minimumReward() throws ContractException {
        final Function function = new Function(FUNC_MINIMUMREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger lowestBounty() throws ContractException {
        final Function function = new Function(FUNC_LOWESTBOUNTY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger DENOMINATOR() throws ContractException {
        final Function function = new Function(FUNC_DENOMINATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List participantOf(String _address) throws ContractException {
        final Function function = new Function(FUNC_PARTICIPANTOF, 
                Arrays.<Type>asList(new Address(_address)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger ANSWERER_DIVIDED() throws ContractException {
        final Function function = new Function(FUNC_ANSWERER_DIVIDED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List resolvedList() throws ContractException {
        final Function function = new Function(FUNC_RESOLVEDLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger SHARER_DIVIDED() throws ContractException {
        final Function function = new Function(FUNC_SHARER_DIVIDED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean questionOpen() throws ContractException {
        final Function function = new Function(FUNC_QUESTIONOPEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean answerOpen() throws ContractException {
        final Function function = new Function(FUNC_ANSWEROPEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger increment() throws ContractException {
        final Function function = new Function(FUNC_INCREMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String newOwner() throws ContractException {
        final Function function = new Function(FUNC_NEWOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt confirmAdministrator() {
        final Function function = new Function(
                FUNC_CONFIRMADMINISTRATOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void confirmAdministrator(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CONFIRMADMINISTRATOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForConfirmAdministrator() {
        final Function function = new Function(
                FUNC_CONFIRMADMINISTRATOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt setAdministrator(String _address) {
        final Function function = new Function(
                FUNC_SETADMINISTRATOR, 
                Arrays.<Type>asList(new Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setAdministrator(String _address, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADMINISTRATOR, 
                Arrays.<Type>asList(new Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAdministrator(String _address) {
        final Function function = new Function(
                FUNC_SETADMINISTRATOR, 
                Arrays.<Type>asList(new Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetAdministratorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADMINISTRATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt question(byte[] _question, byte[] _answer) {
        final Function function = new Function(
                FUNC_QUESTION, 
                Arrays.<Type>asList(new Bytes32(_question),
                new Bytes32(_answer)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void question(byte[] _question, byte[] _answer, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUESTION, 
                Arrays.<Type>asList(new Bytes32(_question),
                new Bytes32(_answer)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQuestion(byte[] _question, byte[] _answer) {
        final Function function = new Function(
                FUNC_QUESTION, 
                Arrays.<Type>asList(new Bytes32(_question),
                new Bytes32(_answer)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getQuestionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUESTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public String administrator() throws ContractException {
        final Function function = new Function(FUNC_ADMINISTRATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger resolvedCount() throws ContractException {
        final Function function = new Function(FUNC_RESOLVEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt modifyQuestionState() {
        final Function function = new Function(
                FUNC_MODIFYQUESTIONSTATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void modifyQuestionState(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYQUESTIONSTATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyQuestionState() {
        final Function function = new Function(
                FUNC_MODIFYQUESTIONSTATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public List<NewQuestionEventResponse> getNewQuestionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWQUESTION_EVENT, transactionReceipt);
        ArrayList<NewQuestionEventResponse> responses = new ArrayList<NewQuestionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewQuestionEventResponse typedResponse = new NewQuestionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.questioner = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.question = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.questionTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.rewardAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewQuestionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWQUESTION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNewQuestionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWQUESTION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<QuestionSolvedEventResponse> getQuestionSolvedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(QUESTIONSOLVED_EVENT, transactionReceipt);
        ArrayList<QuestionSolvedEventResponse> responses = new ArrayList<QuestionSolvedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            QuestionSolvedEventResponse typedResponse = new QuestionSolvedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.answerer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.answer = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.answerTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeQuestionSolvedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(QUESTIONSOLVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeQuestionSolvedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(QUESTIONSOLVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static QuestionAnswer load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new QuestionAnswer(contractAddress, client, credential);
    }

    public static QuestionAnswer deploy(Client client, CryptoKeyPair credential, String _owner) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_owner)));
        return deploy(QuestionAnswer.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class NewQuestionEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String questioner;

        public byte[] question;

        public BigInteger questionTime;

        public BigInteger rewardAmount;
    }

    public static class QuestionSolvedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String answerer;

        public byte[] answer;

        public BigInteger answerTime;
    }
}
