package com.fish1208.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray3;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple10;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple9;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class WorldCup extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","ffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f9057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612fcc57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156130e757600080fd5b60048360ff168154811015156130f957fe5b90600052602060002090600b020190506000600381111561311657fe5b8160030160009054906101000a900460ff16600381111561313357fe5b14151561313f57600080fd5b6000600381111561314c57fe5b82600381111561315857fe5b1415151561316557600080fd5b80600501544211151561317757600080fd5b818160030160006101000a81548160ff0219169083600381111561319757fe5b0217905550505050565b60008060008414156131b657600091506131d8565b82840290508284828115156131c757fe5b041415156131d457600080fd5b8091505b5092915050565b6000806000831115156131f157600080fd5b82848115156131fc57fe5b0490508091505092915050565b600080828401905083811015151561322057600080fd5b8091505092915050565b606060405190810160405280600390602082028038833980820191505090505090565b610120604051908101604052806060815260200160608152602001606081526020016000600381111561327c57fe5b81526020016000600281111561328e57fe5b8152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106132f157805160ff191683800117855561331f565b8280016001018555821561331f579182015b8281111561331e578251825591602001919060010190613303565b5b50905061332c9190613330565b5090565b61335291905b8082111561334e576000816000905550600101613336565b5090565b905600a165627a7a7230582005eb76750ca2507557e47cbd5176a19947bd4bbfa84fe60461975323050d71dd0029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"6080604052671bc16d674ec80000600155620186a0600255600060035534801561002857600080fd5b5060405160208061341e8339810180604052810190808051906020019092919050505080806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506133818061009d6000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806315db3b431461019b57806316cad12a146101ff57806328a3d469146102425780633be80171146102865780635089e2c81461030f578063762e8ac1146103665780637eb36bf3146103965780638016ba83146103d357806389599c671461040057806393f35d48146105f65780639e64301c14610626578063a321258314610655578063a564927c146106a5578063aeef5a3114610869578063c0421cde1461094a578063c148237f1461097a578063c1ca75f314610a13578063e9ef182114610a9f578063ed104bba14610acc575b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561016257600080fd5b7f0ec3956e92adbcdd81ca452d1b47dcd7c5d20b0e3167fba7f20015a36c707a7e346040518082815260200191505060405180910390a1005b3480156101a757600080fd5b506101e9600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610af7565b6040518082815260200191505060405180910390f35b34801561020b57600080fd5b50610240600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c1b565b005b34801561024e57600080fd5b50610270600480360381019080803560ff169060200190929190505050610d70565b6040518082815260200191505060405180910390f35b34801561029257600080fd5b5061030d600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803590602001909291908035906020019092919080359060200190929190505050610da1565b005b34801561031b57600080fd5b50610324611005565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037257600080fd5b50610394600480360381019080803560ff16906020019092919050505061102a565b005b3480156103a257600080fd5b506103d1600480360381019080803560ff169060200190929190803560ff169060200190929190505050611394565b005b3480156103df57600080fd5b506103fe600480360381019080803590602001909291905050506114ab565b005b34801561040c57600080fd5b5061042e600480360381019080803560ff169060200190929190505050611510565b604051808060200180602001806020018b600381111561044a57fe5b60ff1681526020018a600281111561045e57fe5b60ff16815260200189815260200188815260200187815260200186600360200280838360005b8381101561049f578082015181840152602081019050610484565b5050505090500185815260200184810384528e818151815260200191508051906020019080838360005b838110156104e45780820151818401526020810190506104c9565b50505050905090810190601f1680156105115780820380516001836020036101000a031916815260200191505b5084810383528d818151815260200191508051906020019080838360005b8381101561054a57808201518184015260208101905061052f565b50505050905090810190601f1680156105775780820380516001836020036101000a031916815260200191505b5084810382528c818151815260200191508051906020019080838360005b838110156105b0578082015181840152602081019050610595565b50505050905090810190601f1680156105dd5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b34801561060257600080fd5b50610624600480360381019080803560ff169060200190929190505050611814565b005b34801561063257600080fd5b5061063b611b7e565b604051808215151515815260200191505060405180910390f35b34801561066157600080fd5b506106a3600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dcd565b005b3480156106b157600080fd5b506106d060048036038101908080359060200190929190505050612066565b604051808060200180602001806020018a60038111156106ec57fe5b60ff16815260200189600281111561070057fe5b60ff16815260200188815260200187815260200186815260200185815260200184810384528d818151815260200191508051906020019080838360005b8381101561075857808201518184015260208101905061073d565b50505050905090810190601f1680156107855780820380516001836020036101000a031916815260200191505b5084810383528c818151815260200191508051906020019080838360005b838110156107be5780820151818401526020810190506107a3565b50505050905090810190601f1680156107eb5780820380516001836020036101000a031916815260200191505b5084810382528b818151815260200191508051906020019080838360005b83811015610824578082015181840152602081019050610809565b50505050905090810190601f1680156108515780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b34801561087557600080fd5b506108ab600480360381019080803560ff16906020019092919080359060200190929190803590602001909291905050506122a5565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156108f25780820151818401526020810190506108d7565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610934578082015181840152602081019050610919565b5050505090500194505050505060405180910390f35b610978600480360381019080803560ff169060200190929190803560ff1690602001909291905050506125bf565b005b34801561098657600080fd5b506109bc600480360381019080803560ff1690602001909291908035906020019092919080359060200190929190505050612b88565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109ff5780820151818401526020810190506109e4565b505050509050019250505060405180910390f35b348015610a1f57600080fd5b50610a61600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612faa565b6040518082600360200280838360005b83811015610a8c578082015181840152602081019050610a71565b5050505090500191505060405180910390f35b348015610aab57600080fd5b50610aca6004803603810190808035906020019092919050505061312f565b005b348015610ad857600080fd5b50610ae1613194565b6040518082815260200191505060405180910390f35b60008060008060048660ff16815481101515610b0f57fe5b90600052602060002090600b020192508260070160008460030160009054906101000a900460ff166003811115610b4257fe5b60ff1660ff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150610c0d8360090160008560030160009054906101000a900460ff166003811115610bbf57fe5b60ff1660ff16815260200190815260200160002054610bff600154610bf187600a0154876131a190919063ffffffff16565b6131a190919063ffffffff16565b6131df90919063ffffffff16565b905080935050505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c7657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610cb257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c7c30d4a0f08950cb23be4132957b357fa5dfdb0fcf218f81b86a1c036e47d060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060048260ff16815481101515610d8457fe5b90600052602060002090600b0201600a0154600254039050919050565b610da961322a565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e0457600080fd5b610120604051908101604052808b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200160006003811115610ec657fe5b815260200160016002811115610ed857fe5b8152602001858152602001848152602001838152602001600081525090506004819080600181540180825580915050906001820390600052602060002090600b0201600090919290919091506000820151816000019080519060200190610f4092919061328d565b506020820151816001019080519060200190610f5d92919061328d565b5060408201","","","ffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082806001019350508480600101955050612f17565b80985050505050505050509392505050565b612fb261330d565b600060048460ff16815481101515612fc657fe5b90600052602060002090600b0201905060606040519081016040528082600701600060016003811115612ff557fe5b60ff1660ff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481526020018260070160006002600381111561306257fe5b60ff1660ff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481526020018260070160006003808111156130ce57fe5b60ff1660ff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015481525091505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561318a57600080fd5b8060038190555050565b6000600480549050905090565b60008060008414156131b657600091506131d8565b82840290508284828115156131c757fe5b041415156131d457600080fd5b8091505b5092915050565b6000806000831115156131f157600080fd5b82848115156131fc57fe5b0490508091505092915050565b600080828401905083811015151561322057600080fd5b8091505092915050565b610120604051908101604052806060815260200160608152602001606081526020016000600381111561325957fe5b81526020016000600281111561326b57fe5b8152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106132ce57805160ff19168380011785556132fc565b828001600101855582156132fc579182015b828111156132fb5782518255916020019190600101906132e0565b5b5090506133099190613330565b5090565b606060405190810160405280600390602082028038833980820191505090505090565b61335291905b8082111561334e576000816000905550600101613336565b5090565b905600a165627a7a72305820fa50ce7eab5fb3d120dd8a0360eeacacc7e3e9d3f6b838a87d9bf5316add253b0029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"gameName\",\"type\":\"string\"},{\"name\":\"homeTeamName\",\"type\":\"string\"},{\"name\":\"guestTeamName\",\"type\":\"string\"},{\"name\":\"gameRes\",\"type\":\"uint8\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"gameStartTime\",\"type\":\"uint256\"},{\"name\":\"betOffTime\",\"type\":\"uint256\"},{\"name\":\"medalTime\",\"type\":\"uint256\"},{\"name\":\"betTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"},{\"name\":\"offset\",\"type\":\"uint256\"},{\"name\":\"cnt\",\"type\":\"uint256\"}],\"name\":\"getWithdrawAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"},{\"name\":\"offset\",\"type\":\"uint256\"},{\"name\":\"cnt\",\"type\":\"uint256\"}],\"name\":\"getWinBetAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"}],\"name\":\"closeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getBetInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"}],\"name\":\"getLimitAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGamesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limitTotalBetAmount\",\"type\":\"uint256\"}],\"name\":\"setLimitTotalAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limitPerBetAmount\",\"type\":\"uint256\"}],\"name\":\"setLimitPerAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"}],\"name\":\"openGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"},{\"name\":\"betTo\",\"type\":\"uint8\"}],\"name\":\"betGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"}],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[3]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getBetResByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameName\",\"type\":\"string\"},{\"name\":\"_homeTeamName\",\"type\":\"string\"},{\"name\":\"_guestTeamName\",\"type\":\"string\"},{\"name\":\"_gameStartTime\",\"type\":\"uint256\"},{\"name\":\"_betOffTime\",\"type\":\"uint256\"},{\"name\":\"_medalTime\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameIndex\",\"type\":\"uint8\"},{\"name\":\"gameRes\",\"type\":\"uint8\"}],\"name\":\"setGameRes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"betTo\",\"type\":\"uint8\"}],\"name\":\"UserBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GAMES = "games";

    public static final String FUNC_GETWITHDRAWACCOUNTS = "getWithdrawAccounts";

    public static final String FUNC_GETWINBETACCOUNTS = "getWinBetAccounts";

    public static final String FUNC_CLOSEGAME = "closeGame";

    public static final String FUNC_GETBETINFOBYADDRESS = "getBetInfoByAddress";

    public static final String FUNC_GETLIMITAMOUNT = "getLimitAmount";

    public static final String FUNC_GETGAMESLENGTH = "getGamesLength";

    public static final String FUNC_SETLIMITTOTALAMOUNT = "setLimitTotalAmount";

    public static final String FUNC_SETLIMITPERAMOUNT = "setLimitPerAmount";

    public static final String FUNC_OPENGAME = "openGame";

    public static final String FUNC_BETGAME = "betGame";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETGAMEINFO = "getGameInfo";

    public static final String FUNC_GETBETRESBYADDRESS = "getBetResByAddress";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_CREATEGAME = "createGame";

    public static final String FUNC_ADMINWITHDRAW = "adminWithdraw";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_SETGAMERES = "setGameRes";

    public static final Event USERBET_EVENT = new Event("UserBet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event USERWITHDRAW_EVENT = new Event("UserWithdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected WorldCup(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> games(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_GAMES, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (BigInteger) results.get(8).getValue());
    }

    public List getWithdrawAccounts(BigInteger gameIndex, BigInteger offset, BigInteger cnt) throws ContractException {
        final Function function = new Function(FUNC_GETWITHDRAWACCOUNTS, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Uint256(offset),
                new Uint256(cnt)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple2<List<String>, List<BigInteger>> getWinBetAccounts(BigInteger gameIndex, BigInteger offset, BigInteger cnt) throws ContractException {
        final Function function = new Function(FUNC_GETWINBETACCOUNTS, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Uint256(offset),
                new Uint256(cnt)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, List<BigInteger>>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint256>) results.get(1).getValue()));
    }

    public TransactionReceipt closeGame(BigInteger gameIndex) {
        final Function function = new Function(
                FUNC_CLOSEGAME, 
                Arrays.<Type>asList(new Uint8(gameIndex)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void closeGame(BigInteger gameIndex, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CLOSEGAME, 
                Arrays.<Type>asList(new Uint8(gameIndex)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCloseGame(BigInteger gameIndex) {
        final Function function = new Function(
                FUNC_CLOSEGAME, 
                Arrays.<Type>asList(new Uint8(gameIndex)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCloseGameInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CLOSEGAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List getBetInfoByAddress(BigInteger gameIndex, String sender) throws ContractException {
        final Function function = new Function(FUNC_GETBETINFOBYADDRESS, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Address(sender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray3<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getLimitAmount(BigInteger gameIndex) throws ContractException {
        final Function function = new Function(FUNC_GETLIMITAMOUNT, 
                Arrays.<Type>asList(new Uint8(gameIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getGamesLength() throws ContractException {
        final Function function = new Function(FUNC_GETGAMESLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setLimitTotalAmount(BigInteger _limitTotalBetAmount) {
        final Function function = new Function(
                FUNC_SETLIMITTOTALAMOUNT, 
                Arrays.<Type>asList(new Uint256(_limitTotalBetAmount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setLimitTotalAmount(BigInteger _limitTotalBetAmount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETLIMITTOTALAMOUNT, 
                Arrays.<Type>asList(new Uint256(_limitTotalBetAmount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetLimitTotalAmount(BigInteger _limitTotalBetAmount) {
        final Function function = new Function(
                FUNC_SETLIMITTOTALAMOUNT, 
                Arrays.<Type>asList(new Uint256(_limitTotalBetAmount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetLimitTotalAmountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETLIMITTOTALAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setLimitPerAmount(BigInteger _limitPerBetAmount) {
        final Function function = new Function(
                FUNC_SETLIMITPERAMOUNT, 
                Arrays.<Type>asList(new Uint256(_limitPerBetAmount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setLimitPerAmount(BigInteger _limitPerBetAmount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETLIMITPERAMOUNT, 
                Arrays.<Type>asList(new Uint256(_limitPerBetAmount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetLimitPerAmount(BigInteger _limitPerBetAmount) {
        final Function function = new Function(
                FUNC_SETLIMITPERAMOUNT, 
                Arrays.<Type>asList(new Uint256(_limitPerBetAmount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetLimitPerAmountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETLIMITPERAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt openGame(BigInteger gameIndex) {
        final Function function = new Function(
                FUNC_OPENGAME, 
                Arrays.<Type>asList(new Uint8(gameIndex)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void openGame(BigInteger gameIndex, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_OPENGAME, 
                Arrays.<Type>asList(new Uint8(gameIndex)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOpenGame(BigInteger gameIndex) {
        final Function function = new Function(
                FUNC_OPENGAME, 
                Arrays.<Type>asList(new Uint8(gameIndex)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getOpenGameInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_OPENGAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt betGame(BigInteger gameIndex, BigInteger betTo) {
        final Function function = new Function(
                FUNC_BETGAME, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Uint8(betTo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void betGame(BigInteger gameIndex, BigInteger betTo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BETGAME, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Uint8(betTo)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBetGame(BigInteger gameIndex, BigInteger betTo) {
        final Function function = new Function(
                FUNC_BETGAME, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Uint8(betTo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getBetGameInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BETGAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger> getGameInfo(BigInteger gameIndex) throws ContractException {
        final Function function = new Function(FUNC_GETGAMEINFO, 
                Arrays.<Type>asList(new Uint8(gameIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray3<Uint256>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                convertToNative((List<Uint256>) results.get(8).getValue()), 
                (BigInteger) results.get(9).getValue());
    }

    public BigInteger getBetResByAddress(BigInteger gameIndex, String sender) throws ContractException {
        final Function function = new Function(FUNC_GETBETRESBYADDRESS, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Address(sender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt withdraw(BigInteger gameIndex, String _to) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Address(_to)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void withdraw(BigInteger gameIndex, String _to, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Address(_to)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForWithdraw(BigInteger gameIndex, String _to) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Address(_to)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getWithdrawInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt createGame(String _gameName, String _homeTeamName, String _guestTeamName, BigInteger _gameStartTime, BigInteger _betOffTime, BigInteger _medalTime) {
        final Function function = new Function(
                FUNC_CREATEGAME, 
                Arrays.<Type>asList(new Utf8String(_gameName),
                new Utf8String(_homeTeamName),
                new Utf8String(_guestTeamName),
                new Uint256(_gameStartTime),
                new Uint256(_betOffTime),
                new Uint256(_medalTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createGame(String _gameName, String _homeTeamName, String _guestTeamName, BigInteger _gameStartTime, BigInteger _betOffTime, BigInteger _medalTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEGAME, 
                Arrays.<Type>asList(new Utf8String(_gameName),
                new Utf8String(_homeTeamName),
                new Utf8String(_guestTeamName),
                new Uint256(_gameStartTime),
                new Uint256(_betOffTime),
                new Uint256(_medalTime)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateGame(String _gameName, String _homeTeamName, String _guestTeamName, BigInteger _gameStartTime, BigInteger _betOffTime, BigInteger _medalTime) {
        final Function function = new Function(
                FUNC_CREATEGAME, 
                Arrays.<Type>asList(new Utf8String(_gameName),
                new Utf8String(_homeTeamName),
                new Utf8String(_guestTeamName),
                new Uint256(_gameStartTime),
                new Uint256(_betOffTime),
                new Uint256(_medalTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, BigInteger, BigInteger, BigInteger> getCreateGameInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEGAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue()
                );
    }

    public TransactionReceipt adminWithdraw() {
        final Function function = new Function(
                FUNC_ADMINWITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void adminWithdraw(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADMINWITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAdminWithdraw() {
        final Function function = new Function(
                FUNC_ADMINWITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getAdminWithdrawOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADMINWITHDRAW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt transferOwnership(String _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(_newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transferOwnership(String _newOwner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(_newOwner)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferOwnership(String _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(_newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getTransferOwnershipInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setGameRes(BigInteger gameIndex, BigInteger gameRes) {
        final Function function = new Function(
                FUNC_SETGAMERES, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Uint8(gameRes)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setGameRes(BigInteger gameIndex, BigInteger gameRes, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETGAMERES, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Uint8(gameRes)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetGameRes(BigInteger gameIndex, BigInteger gameRes) {
        final Function function = new Function(
                FUNC_SETGAMERES, 
                Arrays.<Type>asList(new Uint8(gameIndex),
                new Uint8(gameRes)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getSetGameResInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETGAMERES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List<UserBetEventResponse> getUserBetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(USERBET_EVENT, transactionReceipt);
        ArrayList<UserBetEventResponse> responses = new ArrayList<UserBetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UserBetEventResponse typedResponse = new UserBetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.gameIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.betTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserBetEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERBET_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserBetEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERBET_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UserWithdrawEventResponse> getUserWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(USERWITHDRAW_EVENT, transactionReceipt);
        ArrayList<UserWithdrawEventResponse> responses = new ArrayList<UserWithdrawEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UserWithdrawEventResponse typedResponse = new UserWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.gameIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserWithdrawEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERWITHDRAW_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserWithdrawEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERWITHDRAW_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDepositEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DEPOSIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDepositEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DEPOSIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnershipTransferredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnershipTransferredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static WorldCup load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new WorldCup(contractAddress, client, credential);
    }

    public static WorldCup deploy(Client client, CryptoKeyPair credential, String _owner) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_owner)));
        return deploy(WorldCup.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class UserBetEventResponse {
        public TransactionReceipt.Logs log;

        public String _sender;

        public BigInteger gameIndex;

        public BigInteger betTo;
    }

    public static class UserWithdrawEventResponse {
        public TransactionReceipt.Logs log;

        public String _sender;

        public BigInteger gameIndex;

        public BigInteger amount;
    }

    public static class DepositEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger amount;
    }

    public static class OwnershipTransferredEventResponse {
        public TransactionReceipt.Logs log;

        public String previousOwner;

        public String newOwner;
    }
}
